"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[215],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},g="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=d(n),u=a,m=g["".concat(l,".").concat(u)]||g[u]||p[u]||r;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3682:(e,t,n)=>{n.r(t),n.d(t,{Highlight:()=>c,assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=n(7462),a=(n(7294),n(3905));const r={title:"Configuring Ignition IIoT Architecture",description:"Configuring Ignition IIoT Architecture for Traefik",sidebar_position:1},o=void 0,s={unversionedId:"part-two-ignition-arch/configuring-ignition-iiot",id:"part-two-ignition-arch/configuring-ignition-iiot",title:"Configuring Ignition IIoT Architecture",description:"Configuring Ignition IIoT Architecture for Traefik",source:"@site/docs/part-two-ignition-arch/configuring-ignition-iiot.mdx",sourceDirName:"part-two-ignition-arch",slug:"/part-two-ignition-arch/configuring-ignition-iiot",permalink:"/icc2023-docker-workshop/docs/part-two-ignition-arch/configuring-ignition-iiot",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Configuring Ignition IIoT Architecture",description:"Configuring Ignition IIoT Architecture for Traefik",sidebar_position:1},sidebar:"guideSidebar",previous:{title:"Part Two - Ignition Architectures",permalink:"/icc2023-docker-workshop/docs/category/part-two---ignition-architectures"},next:{title:"Launching Ignition IIoT Architecture",permalink:"/icc2023-docker-workshop/docs/part-two-ignition-arch/launching-ignition-iiot"}},l={},d=[{value:"Modify Default Compose Network",id:"modify-default-compose-network",level:2},{value:"Adding Labels to Ignition Services",id:"adding-labels-to-ignition-services",level:2},{value:"Central Gateway",id:"central-gateway",level:3},{value:"Edge Gateway",id:"edge-gateway",level:3},{value:"Setting up Database",id:"setting-up-database",level:2},{value:"Modifying the <code>db</code> service",id:"modifying-the-db-service",level:3}],c=e=>{let{children:t,color:n}=e;return(0,a.kt)("span",{style:{backgroundColor:n,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},g={toc:d,Highlight:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configuring-ignition-iiot-architecture"},"Configuring Ignition IIoT Architecture"),(0,a.kt)("p",null,"In this section we're going to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Modify the Ignition IIoT Example Architecture to tie into our Reverse Proxy"),(0,a.kt)("li",{parentName:"ul"},"Add a database web UI for managing our database")),(0,a.kt)("p",null,"Where you see code blocks, we'll use the following colors to indicate what you'll need to add/remove/change:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Add")," -> ",(0,a.kt)(c,{color:"#549f45",mdxType:"Highlight"},"GREEN")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Remove")," -> ",(0,a.kt)(c,{color:"#952f2b",mdxType:"Highlight"},"RED")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Modify or Change")," -> ",(0,a.kt)(c,{color:"#9b7539",mdxType:"Highlight"},"ORANGE"))),(0,a.kt)("h2",{id:"modify-default-compose-network"},"Modify Default Compose Network"),(0,a.kt)("p",null,"Open up the ",(0,a.kt)("inlineCode",{parentName:"p"},"ia-architectures/iiot/docker-compose.yml")," in VSCode.  Let's start with modifying the default Compose network by adding the following lines before the top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"secrets")," configuration:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"...\n\n# add-start\n# Add this!\nnetworks:\n  default:\n    name: proxy\n    external: true\n# add-end\n\nsecrets:\n  gateway-admin-password:\n    file: secrets/gateway-admin-password\n  db-ignition-password:\n    file: secrets/db-ignition-password\n  db-root-password:\n    file: secrets/db-root-password\n")),(0,a.kt)("p",null,"Instead of creating a dedicated network for these services, this will connect them to the existing ",(0,a.kt)("inlineCode",{parentName:"p"},"proxy")," network so that Traefik can reach them."),(0,a.kt)("h2",{id:"adding-labels-to-ignition-services"},"Adding Labels to Ignition Services"),(0,a.kt)("p",null,"Next, we need to annotate some of the individual Ignition services to have them be recognized by Traefik.  The way this is done with Traefik is to use labels on the container to add the configurations we need."),(0,a.kt)("h3",{id:"central-gateway"},"Central Gateway"),(0,a.kt)("p",null,"Make the following changes highlighted below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# ...\n  gateway:\n    <<: *ignition-opts\n    build:\n      context: gw-build\n      dockerfile: Dockerfile\n      args:\n        IGNITION_VERSION: ${IGNITION_VERSION:-latest}\n        SUPPLEMENTAL_MODULES: "mqttdistributor mqttengine"\n        BASE_GWBK_NAME: gateway.gwbk\n        GATEWAY_ADMIN_USERNAME: admin\n      secrets:\n        # NOTE: changing a build secret will not bust the cache, run the build with `--no-cache` to force a rebuild\n        - gateway-admin-password\n    pull_policy: build\n    hostname: gateway\n    # remove-start\n    # REMOVE/COMMENT THESE PUBLISHED PORTS\n    #ports:\n    #  - 8088:8088\n    #  - 1883:1883\n    # remove-end\n    command: >\n      -n Ignition-gateway\n      -m ${GATEWAY_MAX_MEMORY:-512}\n      -a gateway.localtest.me\n    # change-next-line\n      -h 80\n    # change-next-line\n      -s 443\n    # add-start\n      --\n      gateway.useProxyForwardedHeader=true\n    # add-end\n    # add-start\n    # ADD THESE LABELS\n    labels:\n      - traefik.enable=true\n      - traefik.hostname=gateway-${COMPOSE_PROJECT_NAME}\n      - traefik.http.routers.gateway-${COMPOSE_PROJECT_NAME}.entrypoints=web,websecure\n      - traefik.http.services.gateway-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8088\n    # add-end\n    volumes:\n      - gateway-data:/usr/local/bin/ignition/data\n      - ./gw-backup/gateway:/backup\n# ...\n')),(0,a.kt)("p",null,"What we're doing here is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Removing the published ports since we're going to use Traefik to connect to the Gateway"),(0,a.kt)("li",{parentName:"ul"},"Updating the Public Address configuration to align with ports 80/443 from Traefik"),(0,a.kt)("li",{parentName:"ul"},"Adding the ",(0,a.kt)("inlineCode",{parentName:"li"},"gateway.useProxyForwardedHeader=true")," argument to the Gateway command to tell it to use the ",(0,a.kt)("inlineCode",{parentName:"li"},"X-Forwarded-*")," headers that Traefik adds to the request."),(0,a.kt)("li",{parentName:"ul"},"Configure labels to describe Traefik router/service configurations.")),(0,a.kt)("h3",{id:"edge-gateway"},"Edge Gateway"),(0,a.kt)("p",null,"Add similar changes for the ",(0,a.kt)("inlineCode",{parentName:"p"},"gateway-edge1")," service so that both Gateways are accessible through their respective names via Traefik on port 80."),(0,a.kt)("h2",{id:"setting-up-database"},"Setting up Database"),(0,a.kt)("p",null,"For the Ignition IIoT Example, we're using a MariaDB database container.  Let's set it up to be accessible through Traefik using ",(0,a.kt)("a",{parentName:"p",href:"https://www.phpmyadmin.net/"},"phpMyAdmin"),"."),(0,a.kt)("h3",{id:"modifying-the-db-service"},"Modifying the ",(0,a.kt)("inlineCode",{parentName:"h3"},"db")," service"),(0,a.kt)("p",null,"First, let's remove the published ports since we're going to add a separate way to manage this database.  Edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," and find the ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," service and comment-out the port-publishing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# ...\n  db:\n    <<: *default-logging\n    image: mariadb:${MARIADB_VERSION:-latest}\n    # REMOVE/COMMENT THIS PORT PUBLISH\n    # remove-start\n    # ports:\n    #   - 3306:3306\n    # remove-end\n    environment:\n      MARIADB_USER: ignition\n      MARIADB_PASSWORD_FILE: /run/secrets/db-ignition-password\n      MARIADB_DATABASE: ignition\n      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/db-root-password\n    secrets:\n      - db-root-password\n      - db-ignition-password\n    volumes:\n      - db-data:/var/lib/mysql\n# ...\n")),(0,a.kt)("p",null,"Then, let's add a new service definition after the ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," service to provide a new web UI for our database:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'  # add-start\n  # Add this after the `db` service\n  phpmyadmin:\n    image: phpmyadmin:5\n    labels:\n      - "traefik.enable=true"\n      - "traefik.hostname=db-${COMPOSE_PROJECT_NAME}"\n      - "traefik.http.routers.phpmyadmin-${COMPOSE_PROJECT_NAME}.entrypoints=web"\n    secrets:\n      - db-root-password\n    environment:\n      - PMA_HOST=${COMPOSE_PROJECT_NAME}-db-1\n      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-root-password\n  # add-end\n')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click to reveal final Ignition IIoT Docker Compose file with modifications"),(0,a.kt)("p",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# IIoT Architecture Example\n# https://inductiveautomation.com/ignition/architectures\n# https://inductiveautomation.com/static/pdf/IgnitionArchitecture-IIoT-CloudRedundant.pdf\n---\nx-default-logging:\n  &default-logging\n  logging:\n    options:\n      max-size: \'100m\'\n      max-file: \'5\'\n    driver: json-file\n\nx-ignition-opts:\n  &ignition-opts\n  <<: *default-logging\n  env_file: gw-init/gateway.env\n  secrets:\n    - gateway-admin-password\n\nservices:\n  gateway:\n    <<: *ignition-opts\n    build:\n      context: gw-build\n      dockerfile: Dockerfile\n      args:\n        IGNITION_VERSION: ${IGNITION_VERSION:-latest}\n        SUPPLEMENTAL_MODULES: "mqttdistributor mqttengine"\n        BASE_GWBK_NAME: gateway.gwbk\n        GATEWAY_ADMIN_USERNAME: admin\n      secrets:\n        # NOTE: changing a build secret will not bust the cache, run the build with `--no-cache` to force a rebuild\n        - gateway-admin-password\n    pull_policy: build\n    hostname: gateway\n    # ports:\n    #   - 8088:8088\n    #   - 1883:1883\n    command: >\n      -n Ignition-gateway\n      -m ${GATEWAY_MAX_MEMORY:-512}\n      -a gateway-${COMPOSE_PROJECT_NAME}.localtest.me\n      -h 80\n      -s 443\n      --\n      gateway.useProxyForwardedHeader=true\n    labels:\n      - traefik.enable=true\n      - traefik.hostname=gateway-${COMPOSE_PROJECT_NAME}\n      - traefik.http.routers.gateway-${COMPOSE_PROJECT_NAME}.entrypoints=web\n      - traefik.http.services.gateway-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8088\n    volumes:\n      - gateway-data:/usr/local/bin/ignition/data\n      - ./gw-backup/gateway:/backup\n\n  gateway-edge1:\n    <<: *ignition-opts\n    build:\n      context: gw-build\n      dockerfile: Dockerfile\n      args:\n        IGNITION_VERSION: ${IGNITION_VERSION:-latest}\n        SUPPLEMENTAL_MODULES: "mqtttransmission"\n        BASE_GWBK_NAME: edge1.gwbk\n        IGNITION_EDITION: edge\n        GATEWAY_ADMIN_USERNAME: admin\n      secrets:\n        - gateway-admin-password\n    pull_policy: build\n    # ports:\n    #   - 8090:8088\n    command: >\n      -n Ignition-edge1\n      -m ${GATEWAY_MAX_MEMORY:-512}\n      -a gateway-edge1-${COMPOSE_PROJECT_NAME}.localtest.me\n      -h 80\n      -s 443\n    labels:\n      - traefik.enable=true\n      - traefik.hostname=gateway-edge1-${COMPOSE_PROJECT_NAME}\n      - traefik.http.routers.gateway-edge1-${COMPOSE_PROJECT_NAME}.entrypoints=web\n      - traefik.http.services.gateway-edge1-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8088\n    volumes:\n      - gateway-edge1-data:/usr/local/bin/ignition/data\n      - ./gw-backup/edge1:/backup\n\n  db:\n    <<: *default-logging\n    image: mariadb:${MARIADB_VERSION:-latest}\n    # ports:\n    #   - 3306:3306\n    environment:\n      MARIADB_USER: ignition\n      MARIADB_PASSWORD_FILE: /run/secrets/db-ignition-password\n      MARIADB_DATABASE: ignition\n      MARIADB_ROOT_PASSWORD_FILE: /run/secrets/db-root-password\n    secrets:\n      - db-root-password\n      - db-ignition-password\n    volumes:\n      - db-data:/var/lib/mysql\n\n  phpmyadmin:\n    image: phpmyadmin:5\n    labels:\n      - "traefik.enable=true"\n      - "traefik.hostname=db-${COMPOSE_PROJECT_NAME}"\n      - "traefik.http.routers.phpmyadmin-${COMPOSE_PROJECT_NAME}.entrypoints=web"\n    secrets:\n      - db-root-password\n    environment:\n      - PMA_HOST=${COMPOSE_PROJECT_NAME}-db-1\n      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-root-password\n\nnetworks:\n  default:\n    name: proxy\n    external: true\n\nsecrets:\n  gateway-admin-password:\n    file: secrets/gateway-admin-password\n  db-ignition-password:\n    file: secrets/db-ignition-password\n  db-root-password:\n    file: secrets/db-root-password\n\nvolumes:\n  gateway-data:\n  gateway-edge1-data:\n  db-data:\n')))))}u.isMDXComponent=!0}}]);